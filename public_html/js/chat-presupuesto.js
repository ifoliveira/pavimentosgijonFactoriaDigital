let chatHistory = [];
let chatStarted = false;

const appendMessage = (msg, sender) => {
  const chatMessages = document.getElementById('chat-messages');
  const div = document.createElement('div');
  div.classList.add('chat-message', `chat-${sender}`);
  div.innerHTML = `<strong>${sender === 'user' ? 'T√∫' : sender === 'ai' ? 'IA' : sender === 'system' ? 'Pavimentos Gij√≥n' : ''}:</strong> ${msg}`;
  chatMessages.appendChild(div);
  chatMessages.scrollTop = chatMessages.scrollHeight;
};

function iniciarChat(tipo) {
  sessionStorage.removeItem('chatHistory');
  localStorage.removeItem('ultimoPresupuestoAI');
  const prompt = getPromptSistema(tipo);

  chatHistory = [{ role: 'system', content: prompt }];

  document.getElementById('selector-reforma').style.display = 'none';
  document.getElementById('chat-box').style.display = 'block';

  let mensajeInicio = '';
  if (tipo === 'ducha') {
    mensajeInicio = "Has elegido cambiar la ba√±era por un plato de ducha. Empecemos con algunas preguntas para calcular el presupuesto.";
  } else if (tipo === 'completo') {
    mensajeInicio = "Vamos a hacer una reforma completa del ba√±o. Empezamos con las medidas del ba√±o, ¬øvale?";
  } else {
    mensajeInicio = "Perfecto. Cu√©ntame qu√© tipo de reforma tienes en mente para ayudarte mejor.";
  }

  appendMessage(mensajeInicio, 'system');
  chatStarted = true;

  fetch(RUTA_CHAT, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'X-Requested-With': 'XMLHttpRequest'
    },
    body: JSON.stringify({ messages: chatHistory })
  })
  .then(response => response.json())
  .then(data => {
    const match = data.reply.match(/```json\s*([\s\S]*?)```/) || data.reply.match(/{[\s\S]*}/);
    const jsonText = match ? match[1] || match[0] : null;

    if (!jsonText) {
      appendMessage(data.reply, 'ai');
      chatHistory.push({ role: 'assistant', content: data.reply });
      return;
    }

    let jsonObj = null;
    try {
      const cleaned = jsonText.replace(/\/\/.*$/gm, '');
      jsonObj = JSON.parse(cleaned);
    } catch (e) {
      appendMessage("‚ùå Error al procesar el JSON", 'ai');
      return;
    }

    window.ultimoPresupuestoJson = jsonObj;

    if (!esJsonCompleto(jsonObj)) {
    appendMessage("‚ö†Ô∏è A√∫n no tengo toda la informaci√≥n. Vamos a seguir con algunas preguntas m√°s antes de calcular.", 'ai');
    return;
    }

    fetch(RUTA_CALCULAR, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(jsonObj)
    })
    .then(res => res.json())
    .then(presupuesto => {
      const texto = `
üíº <strong>Presupuesto estimado</strong><br>
- Mano de obra: <strong>${presupuesto.mano_obra} ‚Ç¨</strong><br>
- Materiales: <strong>${presupuesto.materiales} ‚Ç¨</strong><br>
- Total estimado: <strong>${presupuesto.total_estimado_min} ‚Ç¨</strong> a <strong>${presupuesto.total_estimado_max} ‚Ç¨</strong><br><br>
üìÑ <a href="#" onclick="descargarPdfPresupuesto()" class="btn btn-sm btn-outline-primary">Descargar PDF</a>`;
      appendMessage(texto, 'ai');
    })
    .catch(() => {
      appendMessage("‚ùå Error al calcular el presupuesto.", 'ai');
    });
  })
  .catch(() => {
    appendMessage("‚ùå Error al contactar con la IA. Intenta de nuevo m√°s tarde.", 'ai');
  });
}

function descargarPdfPresupuesto() {
  const json = window.ultimoPresupuestoJson;
  if (!json) {
    alert("No hay presupuesto generado.");
    return;
  }

        try {
         fetch('/api/presupuesto/chat-track', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
            pregunta: 'üìÑ El usuario ha hecho clic en ‚ÄúDescargar PDF‚Äù',
            respuesta: `Presupuesto: ${window.ultimoPresupuestoJson?.total_estimado_min} ‚Ç¨ - ${window.ultimoPresupuestoJson?.total_estimado_max} ‚Ç¨`
            })
        });
        } catch (e) {
        console.warn('‚ùå Seguimiento Telegram fallido (descarga):', e);
        }

  document.getElementById('campo-json-presupuesto').value = JSON.stringify(json);

  const modal = new bootstrap.Modal(document.getElementById('modalContacto'));
  modal.show();
}


function getPromptSistema(tipo) {
  if (tipo === 'ducha') {

   return `
Eres un asistente profesional para calcular presupuestos de reforma de ba√±o (cambio de ba√±era por plato de ducha).

Tu trabajo es hacer preguntas cortas y claras, como un comercial. No hables de "valores booleanos" ni "estructura de datos". Habla como una persona normal, pero con el objetivo de recopilar todos los datos para rellenar un JSON.

Haz siempre solo UNA pregunta por mensaje. Nunca agrupes varias preguntas. Espera la respuesta del usuario antes de continuar. No asumas nada.

Debes continuar haciendo preguntas hasta tener toda la informaci√≥n necesaria. Si a√∫n no tienes todos los datos del JSON, **sigue preguntando sin parar**. No cierres la conversaci√≥n ni preguntes ‚Äú¬øalgo m√°s?‚Äù. Si el usuario se queda en silencio, simplemente recuerda amablemente cu√°l fue la √∫ltima pregunta o vuelve a hacerla de forma m√°s clara.

Al final de cada pregunta, si lo crees √∫til, puedes a√±adir una pista breve entre par√©ntesis para ayudar al usuario a responder, por ejemplo: (Ej: 160 cm x 70 cm).

Estas son las opciones v√°lidas para ciertos campos:

- altura_reforma: "minimo", "1m", "techo"
- reponer_azulejos: "tengo_repuestos", "buscar_similar"
- mampara.tipo: "ninguna", "fijo", "fijo_mas_corredera", "angular", "angular_doble"
- hay_escayola: solo debe aparecer si altura_reforma = "techo"

Cuando tengas toda la informaci√≥n, responde solo con el JSON limpio. No expliques nada, no a√±adas comentarios, ni texto adicional. Usa exactamente estas claves:

{
  "tipo_reforma": "cambio_ba√±era_por_plato_ducha",
  "medidas_ba√±era": {
    "largo_cm": 160,
    "ancho_cm": 70
  },
  "entre_paredes": true,
  "zona_azulejos": {
    "derribo": true,
    "altura_reforma": "1m",
    "reponer_azulejos": "buscar_similar"
  },
  "griferia": {
    "mantener_grifo_actual": true,
    "instalar_barra_ducha": false
  },
  "mampara": {
    "tipo": "fijo_mas_corredera"
  },
  "hay_escayola": false
}

No hables de precios. No utilices la palabra ‚Äútrue‚Äù o ‚Äúfalse‚Äù al preguntar. Interpreta las respuestas del cliente y trad√∫celas correctamente al formato del JSON.

`;
    if (!validarJsonPresupuesto(jsonObj)) {
      appendMessage("‚ö†Ô∏è Faltan algunos datos importantes. Vamos a seguir con algunas preguntas m√°s antes de calcular.", 'ai');
      return;
    }

  }

  if (tipo === 'completo') {
    return `Quiero que act√∫es como un asesor experto en reformas de ba√±o completo. Tu tarea es hacer preguntas claras, naturales y comprensibles para cualquier persona, con un tono cercano pero profesional.

Tu objetivo es rellenar el siguiente JSON paso a paso. Nunca muestres el JSON antes de tener toda la informaci√≥n. No hables de campos ni de valores tipo "true/false", interpreta lo que la persona responde y trad√∫celo t√∫ al formato adecuado.

Haz solo UNA pregunta por mensaje. Nunca agrupes varias preguntas. Espera siempre la respuesta del usuario antes de continuar. No asumas nada.

Debes continuar preguntando hasta tener todos los datos necesarios para completar el JSON. Si a√∫n no tienes toda la informaci√≥n, sigue preguntando sin parar. No cierres la conversaci√≥n, no digas "¬øalgo m√°s?" ni detengas el flujo. Si el usuario no responde o se queda en silencio, repite la √∫ltima pregunta de forma m√°s clara o dale una pista.

Si lo crees √∫til, puedes a√±adir una pista breve al final de cada pregunta entre par√©ntesis para ayudar al usuario a responder, por ejemplo: (Ej: 2,40 metros de alto).

Este es el formato exacto del JSON que debes construir una vez tengas todos los datos (no lo muestres hasta entonces):

{
  "tipo_reforma": "ba√±o_completo",
  "medidas_bano": {
    "largo_m": ...,
    "ancho_m": ...,
    "alto_m": ...
  },
  "sanitarios": {
    "ducha_o_banera": {
      "tipo": "ducha" | "banera",
      "medidas_ba√±era": {
        "largo_cm": 160,
        "ancho_cm": 70
      },
      "entre_paredes": true
    },
    "bide": {
      "hay_bide_actual": true,
      "suprimir": true
    }
  },
  "mampara": {
    "tipo": "fijo_mas_corredera"
  },
  "griferia": {
    "mantener_grifo_actual": true,
    "instalar_barra_ducha": false
  },
  "mueble_lavabo": {
    "ancho_cm": ...
  },
  "techo": {
    "hay_escayola": true,
    "reinstalar_escayola": false
  },
  "instalar_radiador_toallero": true,
  "zona_azulejos": {
    "derribo": true,
    "altura_reforma": "techo",
    "reponer_azulejos": "reponer_todos"
  }
}

Cuando tengas toda la informaci√≥n necesaria, responde **solo con el JSON completo**. No expliques nada. No incluyas comentarios ni ning√∫n texto adicional.

No hables de precios. No digas palabras como ‚Äútrue‚Äù o ‚Äúfalse‚Äù al preguntar. Habla como lo har√≠a un profesional del sector y traduce las respuestas al JSON final correctamente.
  `;
  }
  return `Eres un asistente para reformas de ba√±o. Pregunta al usuario qu√© tipo de reforma quiere hacer y gu√≠alo para poder generar un presupuesto provisional dividido en mano de obra y materiales. No entres en detalles t√©cnicos.`;
}


function esJsonCompleto(json) {
  if (!json.tipo_reforma) return false;

  if (json.tipo_reforma === 'cambio_ba√±era_por_plato_ducha') {
    return (
      json.medidas_ba√±era &&
      json.entre_paredes !== undefined &&
      json.zona_azulejos &&
      json.griferia &&
      json.mampara
    );
  }

  if (json.tipo_reforma === 'ba√±o_completo') {
    return (
      json.medidas_bano &&
      json.sanitarios &&
      json.mampara &&
      json.griferia &&
      json.mueble_lavabo &&
      json.techo &&
      json.zona_azulejos
    );
  }

  return false;
}
